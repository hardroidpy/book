#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
HARDroid: Reconocedor de Actividades Humanas
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap5:hardroid"

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec51:intro"

\end_inset

En este capítulo introducimos un sistema que clasifica la actividades humanas
 ambulatorias utilizando teléfonos móviles inteligentes con la plataforma
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\backslash
texttrademark
\end_layout

\end_inset

: 
\emph on
HARDroid
\emph default
.
 El sistema es una adaptación del diseño utilizado por sistemas existentes
 como 
\emph on
Google Play Services
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Google2013l"

\end_inset

, específicamente la funcionalidad para reconocer actividades humanas utilizando
 los conceptos y técnicas expuestos en capítulos precedentes.
 
\end_layout

\begin_layout Standard
El sistema 
\emph on
HARDroid
\emph default
 está implementado en base a dos componentes principales: una interfaz de
 programación que expone las facilidades y un servicio en ejecución que
 realiza las funciones principales del sistema.
 La interfaz para programadores (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{API}
\end_layout

\end_inset

) proporciona una firma de funciones bien definidas junto con la documentación
 adecuada para que toda aplicación móvil de terceros utilice como un componente
 externo la solución de un sistema 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HAR}
\end_layout

\end_inset

.
 El servicio de trasfondo en la plataforma 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 es una aplicación para teléfonos móvil independiente que implementa algoritmos
 de reconocimiento de actividades humanas.
\end_layout

\begin_layout Standard
La propuesta de este trabajo se basa en un diseño desacoplado para contar
 con una implementación genérica y extensible de un sistema 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HAR}
\end_layout

\end_inset

.
 Como en todo sistema de 
\emph on
software
\emph default
, el diseño adecuado posibilita la evolución y mantenimiento del mismo sin
 afectar el funcionamiento de otras aplicaciones móviles clientes dependientes.
 
\end_layout

\begin_layout Standard
Las siguientes secciones se organizan de la siguiente manera: primeramente
 en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec52:diseño"

\end_inset

 damos una introducción de las consideraciones de diseño y metodología utilizada
s para la construcción de los componentes de software.
 Se empieza con los conceptos generales de Ingeniería de Software hasta
 concluir con los detalles técnicos de la plataforma 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

.
 La siguiente sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec53:arquitectura"

\end_inset

 incluye una vista general del sistema explicando su arquitectura.
 La sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec54:hardroid"

\end_inset

 conforma el núcleo principal de este proyecto donde una implementación
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HAR}
\end_layout

\end_inset

 en forma de aplicación móvil desacoplado es presentado.
 También, en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec55:activity"

\end_inset

 se explica el desenvolvimiento de una herramienta para realizar experimentos
 y evaluar los resultados asociados a la solución.
 Por último, en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec56:conclusion"

\end_inset

 se discuten los resultados preliminar obtenidos como motivo de los componentes
 de software construidos.
\end_layout

\begin_layout Section
Diseño General
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec52:diseño"

\end_inset

La construcción del sistema 
\emph on
HARDroid 
\emph default
está enmarcado dentro del ecosistema de aplicaciones móviles.
 Desde el punto de vista conceptual del desarrollo de aplicaciones móviles
 es necesario enfocarse en dos aspectos principales para el diseño: el medio
 y el contexto.
\end_layout

\begin_layout Standard
Una aplicación móvil puede presentarse en diversos medios que corresponden
 con el enfoque técnico 
\begin_inset CommandInset citation
LatexCommand cite
key "Fling2009"

\end_inset

, es decir: un sitio Web Móvil, una aplicación Web Móvil, SMS, Juegos, controles
 utilitarios
\begin_inset Foot
status open

\begin_layout Plain Layout

\emph on
Widgets
\end_layout

\end_inset

 y aplicaciones nativas.
 Las aplicaciones nativas son uno de los medios más utilizados debido a
 la rica experiencia de usuario y capacidades que pueden ser explotadas
 en los dispositivos, ya que disponen de gran soporte en la plataforma subyacent
e.
 Por ejemplo, en la plataforma para teléfonos móviles 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset


\emph on
 
\emph default
se dispone de las capacidades disponibles del dispositivo como almacenamiento,
 ubicación, sensores y además un medio de distribución certificado como
 ser el 
\emph on
Google Play Store
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Google2016p"

\end_inset

.
 
\end_layout

\begin_layout Standard
Por otro lado, está el contexto de la aplicación que se refiere a la experiencia
 que el usuario final obtiene al utilizar el sistema móvil.
 Para esto el sistema móvil procesa la información de contexto que rodea
 al usuario dando una interacción distinta a los sistemas convencionales.
 A continuación se listan los tipos de contexto comunes utilizados en las
 aplicaciones móviles y un breve ejemplo de su funcionalidad 
\begin_inset CommandInset citation
LatexCommand cite
key "Fling2009"

\end_inset

:
\end_layout

\begin_layout Itemize

\emph on
Utilidad
\emph default
: Calculadora, Conversión de monedas.
\end_layout

\begin_layout Itemize

\emph on
Localización
\emph default
: Mapas, Registro de actividades físicas.
\end_layout

\begin_layout Itemize

\emph on
Informativo
\emph default
: Buscar información relevante.
\end_layout

\begin_layout Itemize

\emph on
Productividad
\emph default
: Comprar productos y pagar servicios
\end_layout

\begin_layout Itemize

\emph on
Inmersión
\emph default
: Juegos 
\end_layout

\begin_layout Standard
Estos tipos de contexto se pueden combinar para crear mejores experiencias
 de uso de la aplicación móvil.
 El trabajo desarrollado en esta tesis se adecua al modelo de aplicaciones
 móviles de contexto.
 Se busca proveer un componente de 
\emph on
Utilidad
\emph default
 que puede ser combinado con diferentes aplicaciones móviles desarrollados
 por terceros y pueda ser mantenido de forma colaborativa.
 
\end_layout

\begin_layout Subsection
Criterios de diseño
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ssec52:criterios-diseño"

\end_inset

La implementación de este trabajo, así como la mayoría de los sistemas de
 información, se rige bajo el principio de diseño 
\emph on
basado en componentes
\emph default
 donde se busca separar la complejidad de un sistema en módulos y que estos
 interactúen entre sí.
 Los módulos en el diseño de sistemas mejoran la flexibilidad y comprensión
 mientras se reduce el tiempo de desarrollo de los mismos 
\begin_inset CommandInset citation
LatexCommand cite
key "Parnas1972"

\end_inset

.
\end_layout

\begin_layout Standard
Una de las técnicas más comunes de diseño de sistemas
\emph on
 
\emph default
es la separación por capas (
\emph on
Layering
\emph default
, en inglés
\emph on
)
\emph default
 para dividir un sistema complejo 
\begin_inset CommandInset citation
LatexCommand cite
key "Fowler2002"

\end_inset

 en diferentes niveles.
 
\end_layout

\begin_layout Subsubsection
Arquitecturas en capas
\end_layout

\begin_layout Standard
Cuando un sistema se construye en términos de capas, los módulos se organizan
 en niveles apilados como en un pastel, donde cada capa se soporta sobre
 la capa baja subyacente.
 En este sentido, la capa superior utiliza varios servicios definidos en
 capas inferiores, pero la capa inferior desconoce y no depende de las capas
 en niveles superiores.
 Las capas definen concretamente las responsabilidades y encapsulan las
 funcionalidades soportadas en cada nivel.
\end_layout

\begin_layout Standard
La popularidad de la división de sistemas en módulos por capas se volvió
 más relevante con el auge de los sistemas tipo 
\emph on
Cliente-Servidor
\emph default
.
 Estos sistemas fueron inicialmente concebidos como de dos (2) capas: el
 cliente se encarga de la interfaz de usuario y la lógica de la aplicación,
 y el servidor usualmente es una bases de datos relacional.
 En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:cliente_servidor}
\end_layout

\end_inset

 se muestra una representación de la arquitectura en dos capas.
 Para sistemas sencillos que desplieguen información y actualicen datos,
 este modelo es el más adecuado.
 Sin embargo, a medida que se construyen sistemas más complejos, el problema
 radica mantener la lógica central del sistema: las reglas de negocio, validacio
nes, cálculos, etc.
 El modelo de dos capas propone ubicar la lógica central embebida en la
 interacciones de la Interfaz de Usuario, la capa cliente, o almacenar los
 mismos en procedimientos almacenados en la basa de datos, la capa servidor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/cliente_servidor.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:cliente_servidor"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Modelo de dos capas
\end_layout

\end_inset

Modelo de dos capas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Debido a las limitaciones del enfoque Cliente-Servidor, se puede extender
 el mismo con la ayuda del paradigma de Orientación a Objetos para construir
 sistemas con arquitecturas de tres (3) capas.
 Estas capas son comúnmente conocidas como 
\begin_inset CommandInset citation
LatexCommand cite
key "Fowler2002"

\end_inset

: Presentación, Dominio y Recursos.
 En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tabref{tab5:tres_capas}
\end_layout

\end_inset

 se definen las responsabilidades correspondientes a cada capa.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capa
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Responsabilidades
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Presentación
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provisión de servicios a sistemas externos, despliegue de información e
 interacción con el usuario.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dominio
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lógica y procesamiento del sistema.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comunicación con bases de datos, sistemas externos, integración, transacciones
 y otros componentes.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab5:tres_capas"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Modelo de tres capas
\end_layout

\end_inset

Modelo de tres capas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Independientemente del tipo de sistema de información a ser construido dividir
 el mismo en capas lógicas, dividir el sistema en partes separadas, permite
 reducir el acoplamiento entre diferentes módulos, inclusive si todos los
 módulos se ejecutan en la misma máquina física.
 En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:tres_capas}
\end_layout

\end_inset

 se muestra la arquitectura de tres capas discutida anteriormente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/arqui_tres_capas.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:tres_capas"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Modelo de tres capas
\end_layout

\end_inset

Modelo de tres capas
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Patrones de diseño
\end_layout

\begin_layout Standard
Los patrones de diseño son concepto importante del paradigma de orientación
 a objetos, que han sido ideados para solucionar problemas comunes determinados
 en un contexto particular 
\begin_inset CommandInset citation
LatexCommand cite
key "Shalloway2004"

\end_inset

.
 Una definición acertada es la que se cita a continuación.
\end_layout

\begin_layout Quotation
\begin_inset Quotes fld
\end_inset


\emph on
Cada patrón describe un problema que ocurre una y otra vez en nuestro entorno,
 y también describe la solución principal al problema, de tal manera que
 la solución pueda ser utilizada millares de veces, sin tener que duplicar
 el trabajo de pensar cómo resolver el problema.
\begin_inset Quotes frd
\end_inset


\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Alexander1977"

\end_inset


\end_layout

\begin_layout Standard
Para nuestro objetivo de diseño se utilizan los siguientes patrones de diseño
 para organizar la capa de 
\emph on
Dominio
\emph default
 cuya responsabilidad es la lógica principal del sistema.
 Se sigue la técnica de dividir la capa de
\emph on
 Dominio
\emph default
 por medio de los siguientes patrones 
\begin_inset CommandInset citation
LatexCommand cite
key "Fowler2002"

\end_inset

:
\end_layout

\begin_layout Enumerate

\emph on
Service Layer
\emph default
: Capa de servicios
\end_layout

\begin_layout Enumerate

\emph on
Domain Model
\emph default
: Modelo del dominio
\end_layout

\begin_layout Standard
La capa de servicios es el punto de interacción entre la 
\emph on
Presentación
\emph default
 y el
\emph on
 Dominio
\emph default
, por lo que actúa como proveedor de una interfaz clara (comúnmente una
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{API}
\end_layout

\end_inset

 de programación).
 Este patrón define los límites del sistema con una capa de servicios que
 establece el conjunto de operaciones disponibles y coordina el proceso
 de cada operación.
 La capa de servicios puede ser tan gruesa o tan fina como se requiera,
 puede contener objetos de servicio con reglas de negocio, manejo de transaccion
es y seguridad.
\end_layout

\begin_layout Standard
Por otro lado, el modelo del dominio da soporte a la capa de servicios.
 Este patrón define objetos de dominio que tienen incorporados datos y comportam
iento, estos representan de manera significativa el dominio del problema
 a resolver.
 Debido a que la lógica de negocio de un sistema puede ser bastante compleja,
 estos objetos están diseñados para manejar las diversas combinaciones de
 reglas y lógica del sistema.
\end_layout

\begin_layout Subsubsection
Guías Generales
\end_layout

\begin_layout Standard
En este trabajo fueron utilizadas las guías generales para construcción
 de sistemas orientados a objetos.
 Algunos de los principios más relevantes que han sido considerados durante
 el diseño de nuestra solución son 
\begin_inset CommandInset citation
LatexCommand cite
key "Albin2003"

\end_inset

:
\end_layout

\begin_layout Itemize
Modularidad
\end_layout

\begin_layout Itemize
Orientación a Objetos
\end_layout

\begin_layout Itemize
Reusabilidad
\end_layout

\begin_layout Itemize
Ocultamiento de Información
\end_layout

\begin_layout Itemize
Abstracción
\end_layout

\begin_layout Standard
Siguiendo estos principios se ha logrado una implementación exitosa de los
 componentes y aplicaciones móviles clientes de verificación.
 Además, se ha enfocado el desarrollo con miras a la colaboración basada
 en la comunidad de código abierto por medio de una Licencia Pública Apache,
 Versión 2.0 (
\emph on
Apache License Version 2.0
\emph default
, en inglés) 
\begin_inset CommandInset citation
LatexCommand cite
key "GimenezYegros2016c"

\end_inset

.
\end_layout

\begin_layout Subsection
Metodología de desarrollo
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ssec52:metodologia"

\end_inset

En toda labor de construcción de sistemas de información es necesario definir
 una metodología de diseño para encarar problemas y tecnologías complejas.
 La metodología utilizada en este trabajo es el diseño descendente (
\emph on
top-down desing
\emph default
), que permite organizar el diseño del sistema en niveles de abstracción
 para reducir la complejidad general del sistema 
\begin_inset CommandInset citation
LatexCommand cite
key "Albin2003"

\end_inset

.
 
\end_layout

\begin_layout Standard
En esta metodología se empieza definiendo la funcionalidad esperada del
 sistema como lo requiere el cliente, la capa más alta, y sigue paso a paso
 hasta refinar el diseño en capas más bajas a medida que se avanzan con
 detalles específicos.
 
\end_layout

\begin_layout Standard
El diseño empieza poniendo énfasis en las funcionalidades esperadas del
 sistema cuando este se encuentre en operación.
 Luego, se continua con el diseño de la lógica de negocios que soportan
 a estas funcionalidades, y por ultimo se enfoca en los recursos necesarios
 por la capa lógica.
\end_layout

\begin_layout Standard
Como aspecto práctico de esta metodología se han identificado las siguientes
 tareas específicas de diseño que ayudan a comprender y describir mejor
 el desarrollo de este trabajo:
\end_layout

\begin_layout Enumerate
Diseñar la arquitectura de la solución.
\end_layout

\begin_layout Enumerate
Diseñar la capa de servicios, o interfaz del sistema enfocada para programadores
 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{API}
\end_layout

\end_inset

) con un conjunto de llamadas a exponer.
\end_layout

\begin_layout Enumerate
Diseño de los recursos que conforman el dominio al servicio.
\end_layout

\begin_layout Enumerate
Implementación del servicio reconocedor.
\end_layout

\begin_layout Enumerate
Implementación de un componente de evaluación de la solución.
\end_layout

\begin_layout Standard
Parte de la metodología consistió en definir la interfaz del sistema en
 base a las mejores prácticas de la industria para aplicaciones móviles
 de contexto, utilizando el lenguaje de programación 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Java}
\end_layout

\end_inset

 y la tecnología basada en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

.
 El diseño se basa en implementaciones existentes 
\begin_inset CommandInset citation
LatexCommand cite
key "Google2016m"

\end_inset

 para heredar las buenas prácticas de programación y obtener la ventaja
 de familiaridad de la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{API}
\end_layout

\end_inset

 para desarrolladores.
\end_layout

\begin_layout Subsection
Tecnología
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ssec52:tecnologia"

\end_inset

Esta sección está dedicada a describir la tecnología utilizada para la implement
ación del diseño de este trabajo.
 Uno de los criterios claves para la selección de teléfonos móviles inteligentes
 apropiados para el reconocimiento de actividades, además de los sensores,
 es el sistema operativo (abreviado 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{OS}
\end_layout

\end_inset

) móvil.
 
\end_layout

\begin_layout Standard
El sistema operativo móvil se encarga del manejo de recursos del dispositivo
 y el control de operación de la aplicaciones móviles.
 Estos sistemas tiene características similares a los sistemas operativos
 convencionales utilizados en las computadoras de escritorio (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{PC}
\end_layout

\end_inset

).
 La función principal de un sistema operativo es proveer servicios comunes
 a las aplicaciones y administrar los recursos de 
\emph on
hardware
\emph default
.
 Adicionalmente, los sistemas operativos móviles están diseñados para el
 uso eficiente de energía, debido a las limitaciones de batería, y característic
as especiales de movilidad.
 
\end_layout

\begin_layout Standard
En este trabajo se propone una herramienta que está dirigida a los teléfonos
 móviles inteligentes basados en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

.
 En los siguientes apartados se da una vista general de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 como plataforma tecnológica de este capítulo.
\end_layout

\begin_layout Subsubsection
Plataforma
\end_layout

\begin_layout Standard
El sistema operativo móvil 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 es una plataforma de código abierto con un entorno de programación de distribuc
ión publica, que además incluye una interfaz de programación (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{API}
\end_layout

\end_inset

) completa con acceso al 
\emph on
hardware
\emph default
 del teléfono y los sensores internos.
 Esta facilidad permite que las herramientas de aprendizaje automático y
 sus procedimientos puedan ser construidos de manera más simple.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 es una plataforma abierta para dispositivos móviles encabezada por 
\emph on
Google
\emph default
 y la 
\emph on
Open Handset Alliance 
\begin_inset CommandInset citation
LatexCommand cite
key "OHA2008"

\end_inset


\emph default
 con el objetivo de innovar en el entorno móvil, mejorando la experiencia
 de usuario a un menor costo 
\begin_inset CommandInset citation
LatexCommand cite
key "Gargenta2014"

\end_inset

.
 El principal aporte que logró 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 es que por primera vez una plataforma abierta consigue separar el 
\emph on
software
\emph default
 y el 
\emph on
hardware
\emph default
 subyacente.
 Esto permite que un gran número diverso de dispositivos ejecuten las mismas
 aplicaciones, creando un ecosistema más variado para desarrolladores y
 consumidores.
 
\end_layout

\begin_layout Subsubsection
Arquitectura
\end_layout

\begin_layout Standard
La plataforma 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 está soportada sobre el núcleo (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Kernel}
\end_layout

\end_inset

) de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Linux}
\end_layout

\end_inset

 cuyo proyecto al igual es una iniciativa de código abierto utilizado ampliament
e en el ámbito de tecnología de la información desde hace más de una década.
 La capa más baja de la arquitectura hereda las principales funcionalidades
 esperadas en los sistemas operativos modernos: portabilidad, seguridad
 y las capacidades funcionales.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/android_stack.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:android-stack"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Arquitectura de Android
\end_layout

\end_inset

Arquitectura de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adicionalmente, la plataforma ha mejorado el núcleo introduciendo un número
 de extensiones especiales para el entorno móvil.
 Las extensiones agregan capacidades funcionales mejoradas para administrar
 la energía; ya que los móviles utilizan batería, mecanismos para llamados
 a procedimientos remotos y aislamiento para mejorar la seguridad 
\begin_inset CommandInset citation
LatexCommand cite
key "Gargenta2014"

\end_inset

.
 Las extensiones fueron módulos agregados cuya lista se detalla a continuación
 con su nomenclatura en inglés 
\begin_inset CommandInset citation
LatexCommand cite
key "Schreiber2011"

\end_inset

: 
\end_layout

\begin_layout Itemize

\emph on
Alarm 
\end_layout

\begin_layout Itemize

\emph on
Ashmem
\end_layout

\begin_layout Itemize

\emph on
Binder
\end_layout

\begin_layout Itemize

\emph on
Power Management
\end_layout

\begin_layout Itemize

\emph on
Low Memory Killer
\end_layout

\begin_layout Itemize

\emph on
Kernel debugger
\emph default
 y 
\emph on
Kernel
\emph default
 
\emph on
logger
\end_layout

\begin_layout Standard
En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:android-stack}
\end_layout

\end_inset

 se muestra la plataforma 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 con todos los componentes que están soportados sobre el núcleo y que en
 la siguiente sección se detallan.
\end_layout

\begin_layout Subsubsection
Componentes
\end_layout

\begin_layout Standard
Los componentes de la plataforma mostrados en la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:android-stack}
\end_layout

\end_inset

 se agrupan en las siguientes partes 
\begin_inset CommandInset citation
LatexCommand cite
key "Gargenta2014"

\end_inset

 (con nomenclatura inglesa):
\end_layout

\begin_layout Itemize

\series bold
Native Layer
\series default
: Este componente llamado capa nativa es un conjunto base de funcionalidades
 implementadas en 
\family typewriter
C/C++
\family default
 que no forman parte del núcleo sino del espacio de usuario del sistema.
 Este grupo está compuesto de varias partes como: abstracciones de 
\emph on
hardware
\emph default
 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HAL}
\end_layout

\end_inset

), librerías nativas, servicios del sistema y herramientas básicas utilitarias.
\end_layout

\begin_layout Itemize

\series bold
Dalvik
\series default
: Es una máquina virtual (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{DVM}
\end_layout

\end_inset

) de propósito específico diseñada especialmente para 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 de manera que este corra aplicaciones programadas en el lenguaje 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Java}
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Ehringer2010"

\end_inset

.
 A diferencia de la máquina virtual de Java estándar (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{JVM}
\end_layout

\end_inset

), el diseño se hizo pensando en restricciones específicas de los entornos
 móviles, como consumo de energía y capacidad limitada de recursos como
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{CPU}
\end_layout

\end_inset

 y Memoria.
 Además, la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{JVM}
\end_layout

\end_inset

 posee restricciones de licencia comercial.
\end_layout

\begin_layout Itemize

\series bold
Application Framework
\series default
: Este componente provee un entorno de programación con varias librerías
 y servicios para construir aplicaciones nativas.
 Este componente es el que está mejor documentado y cubierto en toda la
 plataforma ya que permite a los desarrolladores ser creativos y construir
 aplicaciones que puedan ser distribuirlas al mercado.
 Son parte de este componente las librerías 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Java}
\end_layout

\end_inset

 genéricas y las específicas de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "OHA2008r"

\end_inset

, como también servicios (o gestores de recursos) que facilitan las capacidades
 útiles de la plataforma como ubicación, sensores, conectividad, etc.
 
\end_layout

\begin_layout Itemize

\series bold
Applications
\series default
: Las aplicaciones son el punto de acceso principal de la plataforma y se
 soporta sobre los componentes arriba mencionados.
 La función principal de la aplicación es proveer una utilidad al usuario
 final según lo descrito inicialmente en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec52:diseño"

\end_inset

.
 Las aplicaciones pueden estar instaladas de fábrica en los teléfonos móviles
 o pueden ser adquiridos por los usuarios en los mercados de distribución
 de aplicaciones 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Marco de Trabajo
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ssec52:framework"

\end_inset

En esta sección, se exponen las facilidades de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 como marco de trabajo (
\emph on
framework
\emph default
), es decir, desde el punto de vista del entorno de programación que ofrece,
 con énfasis en las características disponibles para crear aplicaciones
 contextuales.
 Este apartado presenta una vista de alto nivel acerca de los modelos de
 computación y comunicación disponibles en la plataforma.
\end_layout

\begin_layout Subsubsection
Componentes de Computación
\end_layout

\begin_layout Standard
Los bloques principales de una aplicación móvil son componentes que 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 provee para construir una aplicación contextual de utilidad.
 La idea de este apartado es presentar a grandes rasgos los componentes
 disponibles y como estos se combinan entre sí para formar una aplicación.
 Cada aplicación está compuesta de cuatro (4) componentes distintos, donde
 cada uno cubre un tópico en específico 
\begin_inset CommandInset citation
LatexCommand cite
key "Gargenta2014"

\end_inset

.
 Los componentes son descritos a continuación (con nomenclatura inglesa):
\end_layout

\begin_layout Itemize

\series bold
\emph on
Activity
\series default
\emph default
: El componente actividad representa la interfaz de usuario de la aplicación
 responsable de desplegar la información y capturar las interacciones.
 Este componente no persiste información, sino que son tareas de computo
 de corta duración y en primer plano donde el sistema operativo puede requerir
 pararlos y pasarlos a un modo de reposo frecuentemente.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Service
\series default
\emph default
: El componente servicio ofrece un mecanismo para ejecutar tareas de computo
 de larga duración en segundo plano sin interfaz de usuario asociada.
 Un servicio solo puede ser parado si el sistema se queda sin recursos de
 memoria.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Content Provider
\series default
\emph default
: El componente proveedor de contenido provee una interfaz para compartir
 datos entre aplicaciones.
 Su función es la persistencia de datos por medio de una 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{API}
\end_layout

\end_inset

 que sigue el principio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{CRUD}
\end_layout

\end_inset

, una forma de acceso parecida al de bases de datos 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{SQL}
\end_layout

\end_inset

.
 Los datos pueden ser persistidos en archivos locales o recursos remotos
 en red.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Broadcast Receiver
\series default
\emph default
: El componente receptor de mensajes provee un mecanismo para publicación
 y suscripción a eventos del sistema basado en el patrón de diseño 
\emph on
Observer
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Shalloway2004"

\end_inset

.
 El receptor ejecuta una tarea de computo latente que se activa con la ocurrenci
a de un evento para lo cual está suscrito.
 Los eventos tienen la forma de mensajes que es descrito en la siguiente
 sección.
\end_layout

\begin_layout Standard
Estos componentes en su conjunto conforman una aplicación móvil.
 Estos son bloques básicos que están conectados de manera suelta y están
 contenidos en un entorno de aplicación que comparten un proceso del sistema
 operativo y compiten por los mismos recursos: memoria, archivos, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{CPU}
\end_layout

\end_inset

, etc..
\end_layout

\begin_layout Subsubsection
Componente de Comunicación
\end_layout

\begin_layout Standard
El intercambio de datos es una necesidad común entre componentes de un sistema
 (o entre sistemas diferentes).
 En 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

, el intercambio es realizado por medio de un mecanismo 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{IPC}
\end_layout

\end_inset

: una comunicación entre procesos, o comunicación entre componentes si forman
 parte de la misma aplicación 
\begin_inset CommandInset citation
LatexCommand cite
key "Schreiber2011"

\end_inset

.
 
\end_layout

\begin_layout Standard
Cada aplicación dispone de dos (2) componentes que resuelven un tópico en
 particular y son descritos a continuación (con nomenclatura inglesa):
\end_layout

\begin_layout Itemize

\series bold
\emph on
Intent
\series default
\emph default
: El componente mensaje es una representación de las operaciones a ser realizada
s.
 Consiste en una estructura de datos que contiene un identificador en formato
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{URI}
\end_layout

\end_inset

, una acción asociada y datos anexos que son procesados por el sistema de
 comunicación entre procesos.
 
\end_layout

\begin_layout Itemize

\series bold
\emph on
IPC Binder
\series default
\emph default
: El componente procesador que implementa el mecanismo de comunicación entre
 procesos 
\emph on

\begin_inset CommandInset citation
LatexCommand cite
key "Schreiber2011"

\end_inset


\emph default
 y se discute con más detalle durante el desenvolvimiento de este trabajo
\emph on
.
 
\emph default
El sistema operativo 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 junto con su marco de trabajo operan como un sistema distribuido y la tecnologí
a para lograr su diseño se basa completamente en este componente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/mensajes_ipc.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:mensajes-ipc"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout

\emph on
Framework Android
\end_layout

\end_inset

Marco de Trabajo 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:mensajes-ipc}
\end_layout

\end_inset

 se muestran las diferentes formas de interacción entre los componentes
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 citados anteriormente.
 Como se puede apreciar, el mecanismo principal para todas las interacciones
 son llevadas acabo por llamadas 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{IPC}
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Una actividad se inicia por medio de un mensaje y puede lanzar otra actividad
 en pantalla.
 Un servicio se inicia, se para y se asocia por el mecanismo 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{IPC}
\end_layout

\end_inset

 como también las llamadas a métodos y retorno de resultados son realizados
 por el mismo medio.
 Un proveedor de contenidos es consultado con llamadas 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{IPC}
\end_layout

\end_inset

 y retorna los resultados por el mismo medio.
 Todos los eventos son recibidos por el receptor de mensajes por medio del
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{IPC}
\end_layout

\end_inset

.
 Como es manifiesto en la gráfica, el marco de trabajo de 
\emph on
IPC Binder
\emph default
 se basa el modelo 
\emph on
Cliente-Servidor
\emph default
 (ver 
\begin_inset CommandInset ref
LatexCommand ref
reference "ssec52:criterios-diseño"

\end_inset

) y el patrón de diseño 
\emph on
Proxy
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Shalloway2004"

\end_inset

.
\end_layout

\begin_layout Section
Arquitectura del proyecto
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec53:arquitectura"

\end_inset

La solución presentada en este trabajo puede describirse partiendo el mismo
 en tres componentes principales:
\end_layout

\begin_layout Itemize

\series bold
\emph on
HARDroid
\series default
\emph default
: Es un servicio de reconocimiento de actividades humanas específico para
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

.
 Este componente tiene cabida dentro de la capa de 
\emph on
Application Framework
\emph default
 descrita en 
\begin_inset CommandInset ref
LatexCommand ref
reference "ssec52:tecnologia"

\end_inset

 como un servicio utilitario.
 El algoritmo reconocedor de actividades es un componente dinámico capaz
 de actualizar su clasificador continuamente.
\end_layout

\begin_layout Itemize

\series bold
\emph on
ActivitySurvey
\series default
\emph default
: Es una aplicación móvil de encuesta que permite utilizar el servicio de
 reconocimiento y además evaluar el resultado con el consentimiento del
 usuario.
 Este componente está ubicado en la capa de 
\emph on
Applications
\emph default
 descrita en 
\begin_inset CommandInset ref
LatexCommand ref
reference "ssec52:tecnologia"

\end_inset

.
 El resultado evaluado puede ser utilizado para mejorar el clasificador
 de aprendizaje automático.
\end_layout

\begin_layout Itemize

\series bold
\emph on
Backend C4.5
\series default
\emph default
: Es un servicio web 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{REST}
\end_layout

\end_inset

 que recolecta las evaluaciones del usuario que utiliza la aplicación de
 encuesta.
 Además, almacena los resultados que surgen debido a la utilización del
 reconocedor con el objetivo de crear el modelo de aprendizaje automático
 de manera manual.
 
\end_layout

\begin_layout Standard
En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:arqui-general}
\end_layout

\end_inset

 se muestra la vista general de la arquitectura del proyecto donde se muestran
 los dos aportes principales de este trabajo junto con sus partes relevantes.
 El diagrama se describe en lenguaje 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{UML}
\end_layout

\end_inset

 donde los paquetes representan las aplicaciones móviles distribuidas de
 manera independiente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/arqui_general.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:arqui-general"

\end_inset


\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Arquitectura del Proyecto
\end_layout

\end_inset

Arquitectura del Proyecto
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
HARDroid: Servicio de Reconocimiento
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec54:hardroid"

\end_inset

El servicio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HARDroid}
\end_layout

\end_inset

 fue diseñado para ajustarse a las características generales de los gestores
 y/o servicios en la capa de 
\emph on
Application Framework
\emph default
 de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

, Ej.
 
\emph on
Location Manager
\emph default
 o 
\emph on
Google Play Services
\emph default
.
 La ventaja del servicio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HARDroid}
\end_layout

\end_inset

 para las aplicaciones móviles hechas por terceros es que aprovechan las
 últimas mejoras del motor de reconocimiento de actividades, con actualización
 automática de la plataforma distribuida como un 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{APK}
\end_layout

\end_inset

 independiente a través de la tienda 
\emph on
Google Play
\emph default
.
 Esto permite a los usuarios estar actualizados y los desarrolladores poseen
 mecanismos fáciles para integrarse al servicio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HAR}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/hardroid_func.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:hardroid-func"

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Servicio HARDroid
\end_layout

\end_inset

Servicio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HARDroid}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:hardroid-func}
\end_layout

\end_inset

 se muestra el esquema de funcionamiento del servicio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HARDroid}
\end_layout

\end_inset

 en base al diseño expuesto en el párrafo anterior.
 Este esquema de diseño es el más apropiado para crear aplicaciones móviles
 distribuidas en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

, semejante a la arquitectura de servicios de 
\emph on
Google Play Services
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Google2016l"

\end_inset

.
 Las aplicaciones móviles están confinadas en procesos separados del sistema
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

, en su entorno 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{DVM}
\end_layout

\end_inset

 correspondiente, y la comunicación entre distintos procesos se lleva acabo
 por medio de una interfaz 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{AIDL}
\end_layout

\end_inset

 y facilitado por el mecanismo 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{IPC}
\end_layout

\end_inset

 
\emph on
Binder
\emph default
.
\end_layout

\begin_layout Subsection
Módulos Funcionales
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ssec54:modulos"

\end_inset

Desde el punto de vista conceptual el servicio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HARDroid}
\end_layout

\end_inset

 puede ser dividido en cuatro módulos principales que cumplen con las caracterís
ticas específicas que se describen a continuación.
\end_layout

\begin_layout Subsubsection
Interfaz de Servicio
\end_layout

\begin_layout Standard
Este módulo define el modelo dominio y la interfaz del para integración
 (a través de una 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{API}
\end_layout

\end_inset

).
 En el dominio del problema se identificaron los siguientes conceptos definidos:
\end_layout

\begin_layout Itemize

\emph on
Cliente
\emph default
: Un cliente es un proceso remoto que requiere reconocer actividades humanas
 con cierta periodicidad.
\end_layout

\begin_layout Itemize

\emph on
Conexión
\emph default
:
\emph on
 
\emph default
Es una entidad que mantiene la información de estado del servicio como sesión
 del cliente.
 Posee un ciclo de vida de conexión y cierre.
\end_layout

\begin_layout Itemize

\emph on
Actividad Humana
\emph default
: Es una entidad que modela una actividad humana reconocida.
\end_layout

\begin_layout Itemize

\emph on
Vector Característico
\emph default
: Es una entidad que modela el conjunto de valores característicos utilizados
 durante el procesamiento de la señal de los sensores.
\end_layout

\begin_layout Itemize

\emph on
Resultado de Reconocimiento
\emph default
: Es un conjunto de actividades humanas reconocidas junto con la precisión
 estimada y los datos complementarios generados durante el calculo en forma
 de vector característico.
\end_layout

\begin_layout Standard
En la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:domain}
\end_layout

\end_inset

 se muestra el diagrama de clases con los artefactos construidos para el
 manejo del dominio del problema.
 Las clases se definieron con semejanza a los conceptos de 
\emph on
Google Play Services
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Google2016l"

\end_inset

 y la documentación se describe en (véase 
\begin_inset CommandInset citation
LatexCommand cite
key "GimenezYegros2016d"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/class_domain.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:domain"

\end_inset


\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Diagrama de clases del dominio del problema
\end_layout

\end_inset

Diagrama de clases del dominio del problema.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La interfaz del servicio se compone de una conjunto de llamadas para que
 un cliente pueda realizar con las siguientes acciones:
\end_layout

\begin_layout Itemize

\emph on
Conectarse
\emph default
 al servicio
\end_layout

\begin_layout Itemize

\emph on
Desconectarse
\emph default
 del servicio
\end_layout

\begin_layout Itemize

\emph on
Subscribirse
\emph default
 estableciendo la periodicidad de los resultados de actividades humanas
 esperados.
 
\end_layout

\begin_layout Itemize

\emph on
Obtener
\emph default
 un resultado de actividades humanas al instante.
\end_layout

\begin_layout Standard
Teniendo en consideración el modelo de dominio citado anteriormente y las
 acciones requeridas se presenta la interfaz proveída por el servicio en
 la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figref{fig5:service}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/class_service.png
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig5:service"

\end_inset


\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Diagrama de clases de la capa de servicio
\end_layout

\end_inset

Diagrama de clases de la capa de servicio.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Servidor
\end_layout

\begin_layout Standard
El módulo se encarga de recibir las llamadas a procedimientos remotos desde
 los clientes distribuidos en otros procesos e implementar la lógica del
 negocio en base a las acciones requeridas.
 
\end_layout

\begin_layout Itemize
ActivityRecognitionManager
\end_layout

\begin_layout Itemize
ActivityRecognitionService
\end_layout

\begin_layout Subsubsection
Procesamiento
\end_layout

\begin_layout Standard
El módulo se encarga de recolectar las datos de sensores, procesar los mismos
 para obtener vectores característicos y producir como resultado una actividad
 humana en la ventana de tiempo que corresponda.
\end_layout

\begin_layout Itemize
ActivityRecognitionWorker
\end_layout

\begin_layout Subsubsection
Clasificador
\end_layout

\begin_layout Standard
El módulo se encarga de realizar una clasificación en base a un vector caracterí
stico y producir una estimación de la actividad humana correspondiente.
 La implementación del clasificador puede un Clasificador Ingenuo y un Clasifica
dor Basado en Árboles de Decisión.
\end_layout

\begin_layout Itemize
ActivityClassifier
\end_layout

\begin_layout Subsection
Algoritmo de Reconocimiento
\end_layout

\begin_layout Section
ActivitySurvey: Encuesta de Evaluación
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec55:activity"

\end_inset

La aplicación 
\emph on
ActivitySurvey
\emph default
 es una utilitario cuyo principal fin es realizar una encuesta para evaluar
 el servicio 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{HAR}
\end_layout

\end_inset

 en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

.
 Permite obtener la perspectiva del usuario final a medida que se detecta
 alguna acción realizada por el mismo.
 
\end_layout

\begin_layout Subsection
Casos de Uso
\end_layout

\begin_layout Subsection
Módulos Funcionales
\end_layout

\begin_layout Standard
Debido a que la aplicación móvil en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
abbr{Android}
\end_layout

\end_inset

 debe ser fácil e intuitivo de utilizar se dividió las funcionalidades principal
es en los siguientes módulos:
\end_layout

\begin_layout Itemize
SurveyApplication
\end_layout

\begin_layout Itemize
FeedActivity
\end_layout

\begin_layout Itemize
SettingsActivity
\end_layout

\begin_layout Itemize
DetectorService
\end_layout

\begin_layout Itemize
DetectedActivitiesService
\end_layout

\begin_layout Itemize
NotificationReceiver
\end_layout

\begin_layout Itemize
HumanActivityFeed
\end_layout

\begin_layout Itemize
UpdateActionReceiver
\end_layout

\begin_layout Subsection
Persistencia
\end_layout

\begin_layout Subsubsection
Base de datos
\end_layout

\begin_layout Subsubsection
Preferencia
\end_layout

\begin_layout Subsection
Interfaz de Usuario
\end_layout

\begin_layout Section
Conclusión
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec56:conclusion"

\end_inset


\end_layout

\end_body
\end_document
